{"ast":null,"code":"import { legacy_createStore as createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from '@redux-devtools/extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer } from './reducers/userReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userProfileUpdate: userUpdateProfileReducer,\n  userList: userListReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"names":["legacy_createStore","createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userProfileUpdate","userList","orderCreate","orderDetails","orderPay","orderListMy","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"sources":["/Users/darshit/Documents/projects/ecom/frontend/src/store.js"],"sourcesContent":["import { legacy_createStore as createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from '@redux-devtools/extension'\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport {userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer } from './reducers/userReducers'\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer } from './reducers/orderReducers'\n\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer, \n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userProfileUpdate: userUpdateProfileReducer,\n    userList: userListReducer, \n    orderCreate: orderCreateReducer, \n    orderDetails: orderDetailsReducer,\n    orderPay: orderPayReducer, \n    orderListMy: orderListMyReducer,\n})\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\n    JSON.parse(localStorage.getItem('cartItems')) : []\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\n    JSON.parse(localStorage.getItem('userInfo')) : null\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\n    JSON.parse(localStorage.getItem('shippingAddress')) : {}\n\nconst initialState = {\n    cart: { \n        cartItems: cartItemsFromStorage,  \n        shippingAddress: shippingAddressFromStorage,\n    },\n    userLogin: {userInfo: userInfoFromStorage },\n}\n\nconst middleware = [thunk]\nconst store = createStore(reducer, initialState,\n    composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store"],"mappings":"AAAA,SAASA,kBAAkB,IAAIC,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AAC3F,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,kBAAkB,EAAEC,qBAAqB,QAAQ,4BAA4B;AACtF,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAAQC,gBAAgB,EAAEC,mBAAmB,EAAEC,kBAAkB,EAAEC,wBAAwB,EAAEC,eAAe,QAAQ,yBAAyB;AAC7I,SAASC,kBAAkB,EAAEC,mBAAmB,EAAEC,eAAe,EAAEC,kBAAkB,QAAQ,0BAA0B;AAEvH,MAAMC,OAAO,GAAGhB,eAAe,CAAC;EAC5BiB,WAAW,EAAEb,kBAAkB;EAC/Bc,cAAc,EAAEb,qBAAqB;EACrCc,IAAI,EAAEb,WAAW;EACjBc,SAAS,EAAEb,gBAAgB;EAC3Bc,YAAY,EAAEb,mBAAmB;EACjCc,WAAW,EAAEb,kBAAkB;EAC/Bc,iBAAiB,EAAEb,wBAAwB;EAC3Cc,QAAQ,EAAEb,eAAe;EACzBc,WAAW,EAAEb,kBAAkB;EAC/Bc,YAAY,EAAEb,mBAAmB;EACjCc,QAAQ,EAAEb,eAAe;EACzBc,WAAW,EAAEb;AACjB,CAAC,CAAC;AAEF,MAAMc,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,GAC1DC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE;AAEtD,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GACxDC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI;AAEvD,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,GACtEC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC;AAE5D,MAAMK,YAAY,GAAG;EACjBjB,IAAI,EAAE;IACFkB,SAAS,EAAER,oBAAoB;IAC/BS,eAAe,EAAEH;EACrB,CAAC;EACDf,SAAS,EAAE;IAACmB,QAAQ,EAAEL;EAAoB;AAC9C,CAAC;AAED,MAAMM,UAAU,GAAG,CAACtC,KAAK,CAAC;AAC1B,MAAMuC,KAAK,GAAG1C,WAAW,CAACiB,OAAO,EAAEoB,YAAY,EAC3CjC,mBAAmB,CAACF,eAAe,CAAC,GAAGuC,UAAU,CAAC,CAAC,CAAC;AAExD,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}